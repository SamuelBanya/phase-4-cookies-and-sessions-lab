* Notes
I set this lab up with the following command:
#+begin_src bash
bundle install
rails db:migrate db:seed
npm install --prefix client
#+end_src

I then started the backend server with the 'rails s' command.

I then started the frontend server with the 'npm start --prefix client' command.

<2022-11-03 Thu 19:00>: Getting the same error as one of the previous labs, still no response from the actual Flatiron team, so I'll just treat this as a codealong since its impossible to run anyway:
#+begin_src bash
Error: error:0308010C:digital envelope routines::unsupported
    at new Hash (node:internal/crypto/hash:71:19)
    at Object.createHash (node:crypto:133:10)
    at module.exports (/Users/samuelbanya/hub/Development/code/phase-4/phase-4-cookies-and-sessions-lab/client/node_modules/webpack/lib/util/createHash.js:135:53)
    at NormalModule._initBuildHash (/Users/samuelbanya/hub/Development/code/phase-4/phase-4-cookies-and-sessions-lab/client/node_modules/webpack/lib/NormalModule.js:417:16)
    at /Users/samuelbanya/hub/Development/code/phase-4/phase-4-cookies-and-sessions-lab/client/node_modules/webpack/lib/NormalModule.js:452:10
    at /Users/samuelbanya/hub/Development/code/phase-4/phase-4-cookies-and-sessions-lab/client/node_modules/webpack/lib/NormalModule.js:323:13
    at /Users/samuelbanya/hub/Development/code/phase-4/phase-4-cookies-and-sessions-lab/client/node_modules/loader-runner/lib/LoaderRunner.js:367:11
    at /Users/samuelbanya/hub/Development/code/phase-4/phase-4-cookies-and-sessions-lab/client/node_modules/loader-runner/lib/LoaderRunner.js:233:18
    at context.callback (/Users/samuelbanya/hub/Development/code/phase-4/phase-4-cookies-and-sessions-lab/client/node_modules/loader-runner/lib/LoaderRunner.js:111:13)
    at /Users/samuelbanya/hub/Development/code/phase-4/phase-4-cookies-and-sessions-lab/client/node_modules/babel-loader/lib/index.js:59:103 {
  opensslErrorStack: [ 'error:03000086:digital envelope routines::initialization error' ],
  library: 'digital envelope routines',
  reason: 'unsupported',
  code: 'ERR_OSSL_EVP_UNSUPPORTED'
}

Node.js v18.12.0
#+end_src

<2022-11-03 Thu 19:02>: I found this article which exposes the fact that Flatiron didn't bother to update their SSL requirements for these labs:
- https://roytuts.com/how-to-fix-err_ossl_evp_unsupported-in-react-js-application/

The fix is apparently to adjust 'package.json' to the following:
#+begin_src json
  "scripts": {
    "start": "react-scripts --openssl-legacy-provider start",
    "build": "react-scripts --openssl-legacy-provider build"
  }
#+end_src

I changed the 'client/package.json' from this:
#+begin_src json
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "proxy": "http://localhost:3000",
  "dependencies": {
    "@testing-library/jest-dom": "^5.12.0",
    "@testing-library/react": "^11.2.7",
    "@testing-library/user-event": "^12.8.3",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-markdown": "^6.0.2",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.1.2"
  },
  "scripts": {
    "start": "PORT=4000 react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
#+end_src

To this:
#+begin_src json
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "proxy": "http://localhost:3000",
  "dependencies": {
    "@testing-library/jest-dom": "^5.12.0",
    "@testing-library/react": "^11.2.7",
    "@testing-library/user-event": "^12.8.3",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-markdown": "^6.0.2",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.1.2"
  },
  "scripts": {
    "start": "PORT=4000 react-scripts --openssl-legacy-provider start",
    "build": "react-scripts --openssl-legacy-provider build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

#+end_src

I then revised the contents of 'app/controllers/articles_controller.rb' Articles Controller with the following contents:
#+begin_src ruby
class ArticlesController < ApplicationController
  rescue_from ActiveRecord::RecordNotFound, with: :record_not_found

  def index
    articles = Article.all.includes(:user).order(created_at: :desc)
    render json: articles, each_serializer: ArticleListSerializer
  end

  def show
    session[:page_views] ||= 0
    session[:page_views] += 1

    if session[:page_views] <= 3
      article = Article.find(params[:id])
      render json: article
    else
      render json: { error: "Maximum pageview limit reached" }, status: :unauthorized
    end
  end

  private

  def record_not_found
    render json: { error: "Article not found" }, status: :not_found
  end

end
#+end_src

<2022-11-03 Thu 19:46>: I had the '||= 0' syntax incorrect within the Application Controller so after fixing that, I was good to for the related lab's tests.
